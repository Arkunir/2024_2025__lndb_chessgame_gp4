import tkinter as tk

class Piece:
    def __init__(self, nom, couleur):
        self.nom = nom
        self.couleur = couleur

class Plateau:
    def __init__(self, master):
        self.master = master
        self.cases = [[None for _ in range(8)] for _ in range(8)]
        self.selected_piece = None
        self.selected_position = None
        self.current_player = 'blanc'  # Le joueur blanc commence
        self.create_board()
        self.setup_pieces()

    def create_board(self):
        self.canvas = tk.Canvas(self.master, width=400, height=400)
        self.canvas.pack()
        self.canvas.bind("<Button-1>", self.on_click)
        self.draw_board()

    def draw_board(self):
        self.canvas.delete("all")
        for row in range(8):
            for col in range(8):
                color = "white" if (row + col) % 2 == 0 else "gray"
                # Change la couleur de la case si elle est sélectionnée
                if self.selected_piece and (row, col) == self.selected_position:
                    color = "lightgreen"  # Couleur de la case sélectionnée
                self.canvas.create_rectangle(col * 50, row * 50, (col + 1) * 50, (row + 1) * 50, fill=color)
                piece = self.cases[row][col]
                if piece:
                    self.canvas.create_text(col * 50 + 25, row * 50 + 25, text=piece.nom, font=("Arial", 24))

    def setup_pieces(self):
        # Pions
        for col in range(8):
            self.cases[1][col] = Piece('P', 'noir')  # Pions noirs
            self.cases[6][col] = Piece('p', 'blanc')  # Pions blancs

        # Autres pièces
        pieces = ['T', 'C', 'F', 'D', 'R', 'F', 'C', 'T']
        for col in range(8):
            self.cases[0][col] = Piece(pieces[col], 'noir')  # Pièces noires
            self.cases[7][col] = Piece(pieces[col].lower(), 'blanc')  # Pièces blanches

    def on_click(self, event):
        col = event.x // 50
        row = event.y // 50
        if self.selected_piece:
            self.move_piece(row, col)
        else:
            self.select_piece(row, col)

    def select_piece(self, row, col):
        piece = self.cases[row][col]
        if piece:  # Vérifie si une pièce est présente à la position
            if self.selected_piece is None or self.selected_piece.couleur != piece.couleur:
                if piece.couleur == self.current_player:  # Vérifie si c'est le tour du joueur courant
                    self.selected_piece = piece
                    self.selected_position = (row, col)
                    print(f"Pièce sélectionnée: {piece.nom} à la position {row}, {col}")
                else:
                    print("Ce n'est pas votre tour.")
        else:
            print("Aucune pièce sélectionnée ou la pièce sélectionnée n'est pas de la même couleur.")

    def move_piece(self, row, col):
        if self.selected_piece:
            valid_moves = self.get_valid_moves(self.selected_piece, self.selected_position[0], self.selected_position[1])
            if (row, col) in valid_moves:
                # Déplace la pièce
                self.cases[row][col] = self.selected_piece
                self.cases[self.selected_position[0]][self.selected_position[1]] = None
                print(f"Déplacement de {self.selected_piece.nom} à la position {row}, {col}")
                # Changer de joueur
                self.current_player = 'noir' if self.current_player == 'blanc' else 'blanc'
                print(f"C'est le tour du joueur {self.current_player}.")
            else:
                print("Mouvement invalide.")
            self.selected_piece = None
            self.selected_position = None
            self.draw_board()

    def get_valid_moves(self, piece, row, col):
        moves = []

        if piece.nom in ['P', 'p']:  # Pion
            direction = -1 if piece.couleur == 'blanc' else 1  # Direction du mouvement
            start_row = 6 if piece.couleur == 'blanc' else 1  # Position de départ pour avancer de 2 cases

            # Déplacement d'une case
            if 0 <= row + direction < 8 and self.cases[row + direction][col] is None:
                moves.append((row + direction, col))

            # Déplacement de deux cases depuis la position de départ
            if row == start_row and self.cases[row + direction][col] is None and self.cases[row + 2 * direction][col] is None:
                moves.append((row + 2 * direction, col))

            # Captures
            if row + direction < 8:
                if col > 0 and self.cases[row + direction][col - 1] and self.cases[row + direction][col - 1].couleur != piece.couleur:
                    moves.append((row + direction, col - 1))  # Capture gauche
                if col < 7 and self.cases[row + direction][col + 1] and self.cases[row + direction][col + 1].couleur != piece.couleur:
                    moves.append((row + direction, col + 1))  # Capture droite

        # Logique pour la Tour (T)
        if piece.nom in ['T', 't']:  # Tour
            # Mouvements verticaux
            for i in range(1, 8):
                if row + i < 8 and self.cases[row + i][col] is None:
                    moves.append((row + i, col))
                elif row + i < 8 and self.cases[row + i][col].couleur != piece.couleur:
                    moves.append((row + i, col))
                    break
                else:
                    break

            for i in range(1, 8):
                if row - i >= 0 and self.cases[row - i][col] is None:
                    moves.append((row - i, col))
                elif row - i >= 0 and self.cases[row - i][col].couleur != piece.couleur:
                    moves.append((row - i, col))
                    break
                else:
                    break

            # Mouvements horizontaux
            for i in range(1, 8):
                if col + i < 8 and self.cases[row][col + i] is None:
                    moves.append((row, col + i))
                elif col + i < 8 and self.cases[row][col + i].couleur != piece.couleur:
                    moves.append((row, col + i))
                    break
                else:
                    break

            for i in range(1, 8):
                if col - i >= 0 and self.cases[row][col - i] is None:
                    moves.append((row, col - i))
                elif col - i >= 0 and self.cases[row][col - i].couleur != piece.couleur:
                    moves.append((row, col - i))
                    break
                else:
                    break

        # Logique pour le Cavalier (C)
        if piece.nom in ['C', 'c']:  # Cavalier
            knight_moves = [
                (2, 1), (2, -1), (-2, 1), (-2, -1),
                (1, 2), (1, -2), (-1, 2), (-1, -2)
            ]
            for dx, dy in knight_moves:
                new_row, new_col = row + dy, col + dx
                if 0 <= new_row < 8 and 0 <= new_col < 8:
                    if self.cases[new_row][new_col] is None or self.cases[new_row][new_col].couleur != piece.couleur:
                        moves.append((new_row, new_col))

        # Logique pour le Fou (F)
        if piece.nom in ['F', 'f']:  # Fou
            for i in range(1, 8):
                for dx, dy in [(i, i), (i, -i), (-i, i), (-i, -i)]:
                    new_row, new_col = row + dy, col + dx
                    if 0 <= new_row < 8 and 0 <= new_col < 8:
                        if self.cases[new_row][new_col] is None:
                            moves.append((new_row, new_col))
                        elif self.cases[new_row][new_col].couleur != piece.couleur:
                            moves.append((new_row, new_col))
                            break
                        else:
                            break

        # Logique pour la Reine (D)
        if piece.nom in ['D', 'd']:  # Reine
            # Mouvements verticaux et horizontaux (comme la Tour)
            for i in range(1, 8):
                if row + i < 8 and self.cases[row + i][col] is None:
                    moves.append((row + i, col))
                elif row + i < 8 and self.cases[row + i][col].couleur != piece.couleur:
                    moves.append((row + i, col))
                    break
                else:
                    break

            for i in range(1, 8):
                if row - i >= 0 and self.cases[row - i][col] is None:
                    moves.append((row - i, col))
                elif row - i >= 0 and self.cases[row - i][col].couleur != piece.couleur:
                    moves.append((row - i, col))
                    break
                else:
                    break

            # Mouvements diagonaux (comme le Fou)
            for i in range(1, 8):
                for dx, dy in [(i, i), (i, -i), (-i, i), (-i, -i)]:
                    new_row, new_col = row + dy, col + dx
                    if 0 <= new_row < 8 and 0 <= new_col < 8:
                        if self.cases[new_row][new_col] is None:
                            moves.append((new_row, new_col))
                        elif self.cases[new_row][new_col].couleur != piece.couleur:
                            moves.append((new_row, new_col))
                            break
                        else:
                            break

        # Logique pour le Roi (R)
        if piece.nom in ['R', 'r']:  # Roi
            for dx in [-1, 0, 1]:
                for dy in [-1, 0, 1]:
                    if dx == 0 and dy == 0:
                        continue  # Ignorer la case actuelle
                    new_row, new_col = row + dy, col + dx
                    if 0 <= new_row < 8 and 0 <= new_col < 8:
                        if self.cases[new_row][new_col] is None or self.cases[new_row][new_col].couleur != piece.couleur:
                            moves.append((new_row, new_col))

        return moves

if __name__ == "__main__":
    root = tk.Tk()
    plateau = Plateau(root)
    root.mainloop()